name: üß™ Automa√ß√£o de Testes End-to-End com Playwright

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: npm ci
      
    - name: üé≠ Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: üöÄ Send Discord start notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -H "Content-Type: application/json" -X POST \
        -d '{
          "embeds": [{
            "title": "üöÄ Iniciando Testes Playwright",
            "description": "‚è≥ Execu√ß√£o de testes iniciada...",
            "color": 3447003,
            "fields": [
              {
                "name": "üìã Execu√ß√£o",
                "value": "**Branch:** '${{ github.ref_name }}'\n**Commit:** `${{ github.sha }}`\n**Ator:** ${{ github.actor }}",
                "inline": false
              }
            ],
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'",
            "footer": { "text": "ü§ñ Automa√ß√£o - GitHub Actions" }
          }]
        }' "$DISCORD_WEBHOOK"

    - name: üß™ Run Playwright tests
      id: tests
      continue-on-error: true
      run: |
        set +e
        npx playwright test
        echo "test_exit_code=$?" >> $GITHUB_OUTPUT
        set -e

    - name: üì∏ Upload raw artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-artifacts-${{ github.run_number }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: üõ†Ô∏è Prepare site for GitHub Pages (include artifacts)
      if: always()
      run: |
        RUN_NUM=${{ github.run_number }}
        SITE_DIR=site
        mkdir -p $SITE_DIR/reports/$RUN_NUM
        cp -r playwright-report/* $SITE_DIR/reports/$RUN_NUM/ || true
        cp -r test-results $SITE_DIR/reports/$RUN_NUM/test-results || true

    - name: üì¶ Upload pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: ./site

    - name: üöÄ Deploy to GitHub Pages
      id: deploy_pages
      uses: actions/deploy-pages@v1

    - name: üîé Set report URL and thumbnail
      id: set_report
      run: |
        RUN_NUM=${{ github.run_number }}
        OWNER=${{ github.repository_owner }}
        REPO=${{ github.event.repository.name }}
        REPORT_URL="https://${OWNER}.github.io/${REPO}/reports/${RUN_NUM}/"
        echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT

        FILE_IMG=$(find site -type f -iname '*.png' | head -n1 || true)
        if [ -n "$FILE_IMG" ]; then
          REL=${FILE_IMG#site/}
          echo "thumbnail_url=${REPORT_URL}${REL}" >> $GITHUB_OUTPUT
        else
          echo "thumbnail_url=" >> $GITHUB_OUTPUT
        fi

    - name: üîî Send Discord notification
      if: always()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        REPORT_URL: ${{ steps.set_report.outputs.report_url }}
        THUMB: ${{ steps.set_report.outputs.thumbnail_url }}
        EXIT_CODE: ${{ steps.tests.outputs.test_exit_code }}
      run: |
        STATUS_TITLE="‚úÖ Testes Passaram"
        STATUS_DESC="üéâ Todos os testes executados com sucesso!"
        STATUS_COLOR=3066993
        if [ "$EXIT_CODE" != "0" ]; then
          STATUS_TITLE="‚ùå Testes Falharam"
          STATUS_DESC="üö® Falhas detectadas nos testes!"
          STATUS_COLOR=15158332
        fi

        PAYLOAD=$(jq -n \
          --arg title "$STATUS_TITLE" \
          --arg desc "$STATUS_DESC" \
          --arg url "$REPORT_URL" \
          --arg thumb "$THUMB" \
          --arg branch "${GITHUB_REF_NAME}" \
          --arg commit "${GITHUB_SHA}" \
          '{
            embeds: [
              {
                title: $title,
                description: $desc,
                color: ($thumb | length) > 0 ? $STATUS_COLOR : $STATUS_COLOR,
                fields: [
                  { name: "üîó Relat√≥rio HTML", value: $url, inline: false },
                  { name: "üìÇ Logs da Execu√ß√£o", value: "https://github.com/'"${GITHUB_REPOSITORY}"'/actions/runs/'"${GITHUB_RUN_ID}"'", inline: false }
                ],
                image: ($thumb | length) > 0 ? { url: $thumb } : null,
                timestamp: "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'"
              }
            ]
          }')
        echo "$PAYLOAD" | curl -H "Content-Type: application/json" -X POST -d @- "$DISCORD_WEBHOOK"

    - name: üèÅ Set final exit code
      run: exit ${{ steps.tests.outputs.test_exit_code }}
