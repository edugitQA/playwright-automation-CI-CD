name: üß™ Automa√ß√£o de Testes End-to-End com Playwright

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      test_exit_code: ${{ steps.tests.outputs.test_exit_code }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: npm ci
      
    - name: üé≠ Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: üöÄ Send Discord start notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -H "Content-Type: application/json" -X POST \
        -d '{
          "embeds": [{
            "title": "üöÄ Iniciando Testes Playwright",
            "description": "‚è≥ Execu√ß√£o de testes iniciada...",
            "color": 3447003,
            "fields": [
              {
                "name": "üìã Execu√ß√£o",
                "value": "**Branch:** `${{ github.ref_name }}`\n**Commit:** `${{ github.sha }}`\n**Ator:** ${{ github.actor }}",
                "inline": false
              }
            ],
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'",
            "footer": { "text": "ü§ñ Automa√ß√£o - GitHub Actions" }
          }]
        }' "$DISCORD_WEBHOOK"

    - name: üß™ Run Playwright tests
      id: tests
      continue-on-error: true
      run: |
        set +e
        npx playwright test --reporter=html
        echo "test_exit_code=$?" >> $GITHUB_OUTPUT
        set -e

    - name: üì∏ Upload raw artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-artifacts-${{ github.run_number }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: üõ†Ô∏è Prepare site for GitHub Pages (with run history)
      if: always()
      run: |
        RUN_NUM=${{ github.run_number }}
        SITE_DIR=site
        mkdir -p $SITE_DIR/reports/$RUN_NUM
        cp -r playwright-report/* $SITE_DIR/reports/$RUN_NUM/ 2>/dev/null || true
        cp -r test-results $SITE_DIR/reports/$RUN_NUM/test-results 2>/dev/null || true
        
        echo "<html><head><title>Hist√≥rico de Execu√ß√µes</title></head><body>" > $SITE_DIR/index.html
        echo "<h1>Hist√≥rico de Execu√ß√µes Playwright</h1><ul>" >> $SITE_DIR/index.html
        
        # Lista apenas o diret√≥rio atual se for o primeiro run
        if [ -d "$SITE_DIR/reports/$RUN_NUM" ]; then
          echo "<li><a href='./reports/$RUN_NUM/index.html'>Execu√ß√£o #$RUN_NUM</a></li>" >> $SITE_DIR/index.html
        fi
        
        echo "</ul></body></html>" >> $SITE_DIR/index.html

    - name: üì¶ Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üîé Extract report URL
        id: set_report
        run: |
          RUN_NUM=${{ github.run_number }}
          OWNER=${{ github.repository_owner }}
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPORT_URL="https://${OWNER}.github.io/${REPO}/reports/${RUN_NUM}/"
          echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT

      - name: üîî Send Discord final notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/$(echo '${{ github.repository }}' | cut -d'/' -f2)/reports/${{ github.run_number }}/"
          EXIT_CODE="${{ needs.test.outputs.test_exit_code }}"
          
          if [ "$EXIT_CODE" = "0" ]; then
            STATUS_TITLE="‚úÖ Testes Passaram"
            STATUS_DESC="üéâ Todos os testes executados com sucesso!"
            STATUS_COLOR=3066993
          else
            STATUS_TITLE="‚ùå Testes Falharam"
            STATUS_DESC="üö® Falhas detectadas nos testes!"
            STATUS_COLOR=15158332
          fi

          curl -H "Content-Type: application/json" -X POST \
          -d "{
            \"embeds\": [{
              \"title\": \"$STATUS_TITLE\",
              \"description\": \"$STATUS_DESC\",
              \"color\": $STATUS_COLOR,
              \"fields\": [
                {
                  \"name\": \"üîó Relat√≥rio HTML\",
                  \"value\": \"$REPORT_URL\",
                  \"inline\": false
                },
                {
                  \"name\": \"üìÇ Logs da Execu√ß√£o\",
                  \"value\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                  \"inline\": false
                }
              ],
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",
              \"footer\": {
                \"text\": \"ü§ñ Automa√ß√£o - GitHub Actions\"
              }
            }]
          }" "$DISCORD_WEBHOOK"